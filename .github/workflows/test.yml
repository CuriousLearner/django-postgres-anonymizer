name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        django-version: ['3.2', '4.1', '4.2']
        include:
          - python-version: '3.11'
            django-version: '5.0'

    # We'll use a custom setup approach instead of services

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Setup PostgreSQL with Anonymizer Extension
      run: |
        # Create a Dockerfile for PostgreSQL with anonymizer extension
        cat > Dockerfile.postgres << 'EOF'
        FROM postgres:15

        # Install build dependencies
        RUN apt-get update && apt-get install -y \
            git \
            make \
            gcc \
            postgresql-server-dev-15 \
            && rm -rf /var/lib/apt/lists/*

        # Clone and build postgresql_anonymizer
        RUN git clone https://github.com/PostgreSQL-Anonymizer/postgresql_anonymizer.git /tmp/postgresql_anonymizer
        WORKDIR /tmp/postgresql_anonymizer
        RUN make && make install

        # Cleanup
        RUN apt-get remove -y git make gcc postgresql-server-dev-15 && apt-get autoremove -y
        EOF

        # Build and run the PostgreSQL container with anonymizer extension
        docker build -f Dockerfile.postgres -t postgres-anon .
        docker run -d \
          --name postgres-anon \
          -e POSTGRES_PASSWORD=postgres \
          -e POSTGRES_USER=postgres \
          -e POSTGRES_DB=test_db \
          -p 5432:5432 \
          postgres-anon

        # Wait for PostgreSQL to be ready
        until docker exec postgres-anon pg_isready -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install Django==${{ matrix.django-version }}
        pip install -e .
        pip install -r requirements.txt
        pip install coverage pytest pytest-django pytest-cov

    - name: Setup test database
      run: |
        # Install PostgreSQL client for local psql commands
        sudo apt-get update && sudo apt-get install -y postgresql-client

        # Create the anonymizer extension
        PGPASSWORD=postgres psql -h localhost -U postgres -d test_db -c "CREATE EXTENSION IF NOT EXISTS anon CASCADE;"

        # Verify extension was created
        PGPASSWORD=postgres psql -h localhost -U postgres -d test_db -c "SELECT name, installed_version FROM pg_available_extensions WHERE name = 'anon';"

    - name: Run tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        DJANGO_SETTINGS_MODULE: tests.settings
      run: |
        # Run all tests with PostgreSQL anonymizer extension available
        coverage run --source='django_postgres_anon' -m pytest tests/ -v
        coverage report
        coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run black
      run: black --check .

    - name: Run isort
      run: isort --check-only .

    - name: Run flake8
      run: flake8 django_postgres_anon tests

    - name: Run mypy
      run: mypy django_postgres_anon --ignore-missing-imports

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        pip install -e .

    - name: Run bandit
      run: bandit -r django_postgres_anon/

    - name: Run safety
      run: safety check
